{
  "stats": {
    "suites": 18,
    "tests": 22,
    "passes": 22,
    "pending": 0,
    "failures": 0,
    "start": "2018-01-18T08:23:41.262Z",
    "end": "2018-01-18T08:23:41.314Z",
    "duration": 52,
    "testsRegistered": 22,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "UT01: Card",
        "suites": [
          {
            "title": "UT01-01: Constructor",
            "suites": [],
            "tests": [
              {
                "title": "UT01-01-01: Throw Error on Missing Suit",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "6c230316-4279-46f9-805e-4afe3b555c9b",
                "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: Throw Error on Missing Value",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "923f4dd9-2b05-4e51-b05b-718221c9706d",
                "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-03: Return Card on Good Values",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-03: Return Card on Good Values",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
                "err": {},
                "isRoot": false,
                "uuid": "d4dbe6ed-40d2-4015-a85b-8c2193f6b199",
                "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.card.js",
            "uuid": "aa3836ec-4076-47ae-9611-27713d520200",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.card.js",
            "passes": [
              {
                "title": "UT01-01-01: Throw Error on Missing Suit",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "6c230316-4279-46f9-805e-4afe3b555c9b",
                "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: Throw Error on Missing Value",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "923f4dd9-2b05-4e51-b05b-718221c9706d",
                "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-03: Return Card on Good Values",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-03: Return Card on Good Values",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
                "err": {},
                "isRoot": false,
                "uuid": "d4dbe6ed-40d2-4015-a85b-8c2193f6b199",
                "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 4,
            "rootEmpty": false
          },
          {
            "title": "UT01-02: valueOf",
            "suites": [],
            "tests": [
              {
                "title": "UT01-02-01: Return the Correct Numbers",
                "fullTitle": "UT01: Card UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
                "err": {},
                "isRoot": false,
                "uuid": "5f0d2a8b-20f1-4c9e-abc9-07f098a00c2a",
                "parentUUID": "1b0203a7-9e45-4c18-93f9-2a4f0ee7c777",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.card.js",
            "uuid": "1b0203a7-9e45-4c18-93f9-2a4f0ee7c777",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.card.js",
            "passes": [
              {
                "title": "UT01-02-01: Return the Correct Numbers",
                "fullTitle": "UT01: Card UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
                "err": {},
                "isRoot": false,
                "uuid": "5f0d2a8b-20f1-4c9e-abc9-07f098a00c2a",
                "parentUUID": "1b0203a7-9e45-4c18-93f9-2a4f0ee7c777",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/dist/tests/test.card.js",
        "uuid": "f7721c02-542e-423d-8f31-7cab8f3e96b5",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.card.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "UT02: Deck",
        "suites": [
          {
            "title": "UT02-01: Constructor",
            "suites": [],
            "tests": [
              {
                "title": "UT02-01-01: Return Deck",
                "fullTitle": "UT02: Deck UT02-01: Constructor UT02-01-01: Return Deck",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "3febec68-8345-4862-8a87-302fa343d5d9",
                "parentUUID": "16d97c28-d6c9-43e9-a6d1-9aa8bc796009",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "16d97c28-d6c9-43e9-a6d1-9aa8bc796009",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-01-01: Return Deck",
                "fullTitle": "UT02: Deck UT02-01: Constructor UT02-01-01: Return Deck",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "3febec68-8345-4862-8a87-302fa343d5d9",
                "parentUUID": "16d97c28-d6c9-43e9-a6d1-9aa8bc796009",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-02: Shuffle",
            "suites": [],
            "tests": [
              {
                "title": "UT02-02-01: Deck should be shuffled",
                "fullTitle": "UT02: Deck UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
                "err": {},
                "isRoot": false,
                "uuid": "73887f74-f83a-4502-bd57-44db11ec994f",
                "parentUUID": "c77b7e67-434d-44ce-822b-e61f9880c6bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "c77b7e67-434d-44ce-822b-e61f9880c6bb",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-02-01: Deck should be shuffled",
                "fullTitle": "UT02: Deck UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
                "err": {},
                "isRoot": false,
                "uuid": "73887f74-f83a-4502-bd57-44db11ec994f",
                "parentUUID": "c77b7e67-434d-44ce-822b-e61f9880c6bb",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-03: cardsInDeck",
            "suites": [],
            "tests": [
              {
                "title": "UT02-03-01: Initialliy there should be 52",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "af1e1ddc-1e10-4a4d-9a39-cd394487a97c",
                "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Adding a Card to get 53",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
                "err": {},
                "isRoot": false,
                "uuid": "d2544e64-dea5-495a-8827-21304c94b11c",
                "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-03: Drawing a Card to get 51",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "a65f420d-6028-48b8-9214-b97c86e75eca",
                "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-03-01: Initialliy there should be 52",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "af1e1ddc-1e10-4a4d-9a39-cd394487a97c",
                "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Adding a Card to get 53",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
                "err": {},
                "isRoot": false,
                "uuid": "d2544e64-dea5-495a-8827-21304c94b11c",
                "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-03: Drawing a Card to get 51",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "a65f420d-6028-48b8-9214-b97c86e75eca",
                "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-04: Draw",
            "suites": [],
            "tests": [
              {
                "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "fullTitle": "UT02: Deck UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "12a48301-997d-4d1d-9a7f-1887c15f998e",
                "parentUUID": "ebfe3089-4a1f-4043-91ae-02c6d40f83b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "ebfe3089-4a1f-4043-91ae-02c6d40f83b6",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "fullTitle": "UT02: Deck UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "12a48301-997d-4d1d-9a7f-1887c15f998e",
                "parentUUID": "ebfe3089-4a1f-4043-91ae-02c6d40f83b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT02-05: Peek",
            "suites": [],
            "tests": [
              {
                "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "fullTitle": "UT02: Deck UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "98125c3d-5476-4843-8be2-93c48e3fcc7c",
                "parentUUID": "d4238625-2231-4fa8-80c3-9558459dc8f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "d4238625-2231-4fa8-80c3-9558459dc8f1",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "fullTitle": "UT02: Deck UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "98125c3d-5476-4843-8be2-93c48e3fcc7c",
                "parentUUID": "d4238625-2231-4fa8-80c3-9558459dc8f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT02-06: add",
            "suites": [],
            "tests": [
              {
                "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
                "fullTitle": "UT02: Deck UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
                "err": {},
                "isRoot": false,
                "uuid": "b1ccf0f9-c7c0-45f2-b45c-f314a30ae737",
                "parentUUID": "e6f097a5-9856-433d-af61-fac77472982d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "e6f097a5-9856-433d-af61-fac77472982d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
                "fullTitle": "UT02: Deck UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
                "err": {},
                "isRoot": false,
                "uuid": "b1ccf0f9-c7c0-45f2-b45c-f314a30ae737",
                "parentUUID": "e6f097a5-9856-433d-af61-fac77472982d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT02-07: Refill",
            "suites": [],
            "tests": [
              {
                "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
                "err": {},
                "isRoot": false,
                "uuid": "a4ad5ab1-022f-40e5-9326-c9310cd86686",
                "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "8813f64f-33b0-4d15-bbb4-d241b6cd8d8b",
                "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "1d6951af-ded3-4787-a97d-7656995e2040",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
                "err": {},
                "isRoot": false,
                "uuid": "a4ad5ab1-022f-40e5-9326-c9310cd86686",
                "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "8813f64f-33b0-4d15-bbb4-d241b6cd8d8b",
                "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/dist/tests/test.deck.js",
        "uuid": "4d099fd9-2fcc-4d6f-a519-8307bd897cca",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "UT03: Hand",
        "suites": [
          {
            "title": "UT03-01: Constructor",
            "suites": [],
            "tests": [
              {
                "title": "UT03-01-01: Return Hand",
                "fullTitle": "UT03: Hand UT03-01: Constructor UT03-01-01: Return Hand",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "1152fbc9-76d6-48dd-9103-c869b0cb7b56",
                "parentUUID": "e9c18fd6-a120-465e-9a08-e0c5f011760a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.hand.js",
            "uuid": "e9c18fd6-a120-465e-9a08-e0c5f011760a",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
            "passes": [
              {
                "title": "UT03-01-01: Return Hand",
                "fullTitle": "UT03: Hand UT03-01: Constructor UT03-01-01: Return Hand",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "1152fbc9-76d6-48dd-9103-c869b0cb7b56",
                "parentUUID": "e9c18fd6-a120-465e-9a08-e0c5f011760a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT03-02: List",
            "suites": [],
            "tests": [
              {
                "title": "UT03-02-01: Should show an Array of all Cards",
                "fullTitle": "UT03: Hand UT03-02: List UT03-02-01: Should show an Array of all Cards",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nmyHand.add(new card_1.Card(card_1.Value.Nine, card_1.Suit.Hearts));\nchai_1.expect(myHand.cardsInHand()).to.equal(2);\nlet cards = myHand.list();\nchai_1.expect(cards[0].suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(cards[0].value).to.equal(card_1.Value.Eight);\nchai_1.expect(cards[1].suit).to.equal(card_1.Suit.Hearts);\nchai_1.expect(cards[1].value).to.equal(card_1.Value.Nine);\nchai_1.expect(myHand.cardsInHand()).to.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "5c195e18-02bc-4860-b0de-325e27b39ed2",
                "parentUUID": "a662a233-48b6-43c8-93b6-d045ea93f79e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.hand.js",
            "uuid": "a662a233-48b6-43c8-93b6-d045ea93f79e",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
            "passes": [
              {
                "title": "UT03-02-01: Should show an Array of all Cards",
                "fullTitle": "UT03: Hand UT03-02: List UT03-02-01: Should show an Array of all Cards",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nmyHand.add(new card_1.Card(card_1.Value.Nine, card_1.Suit.Hearts));\nchai_1.expect(myHand.cardsInHand()).to.equal(2);\nlet cards = myHand.list();\nchai_1.expect(cards[0].suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(cards[0].value).to.equal(card_1.Value.Eight);\nchai_1.expect(cards[1].suit).to.equal(card_1.Suit.Hearts);\nchai_1.expect(cards[1].value).to.equal(card_1.Value.Nine);\nchai_1.expect(myHand.cardsInHand()).to.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "5c195e18-02bc-4860-b0de-325e27b39ed2",
                "parentUUID": "a662a233-48b6-43c8-93b6-d045ea93f79e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT03-03: cardsInHand",
            "suites": [],
            "tests": [
              {
                "title": "UT03-03-01: Initialliy there should be 0",
                "fullTitle": "UT03: Hand UT03-03: cardsInHand UT03-03-01: Initialliy there should be 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d08017ad-ff04-445f-9cce-1725cece23dd",
                "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT03-03-02: Adding a Card to get 1",
                "fullTitle": "UT03: Hand UT03-03: cardsInHand UT03-03-02: Adding a Card to get 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "bf6f5598-efb8-4d3c-b4df-ac4755860882",
                "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-03: Playing a Card to get to 0",
                "fullTitle": "UT03: Hand UT03-03: cardsInHand UT02-03-03: Playing a Card to get to 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nmyHand.play(0);\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "55745fde-ba3b-4950-91c7-219de8dec368",
                "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.hand.js",
            "uuid": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
            "passes": [
              {
                "title": "UT03-03-01: Initialliy there should be 0",
                "fullTitle": "UT03: Hand UT03-03: cardsInHand UT03-03-01: Initialliy there should be 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d08017ad-ff04-445f-9cce-1725cece23dd",
                "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT03-03-02: Adding a Card to get 1",
                "fullTitle": "UT03: Hand UT03-03: cardsInHand UT03-03-02: Adding a Card to get 1",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "bf6f5598-efb8-4d3c-b4df-ac4755860882",
                "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-03: Playing a Card to get to 0",
                "fullTitle": "UT03: Hand UT03-03: cardsInHand UT02-03-03: Playing a Card to get to 0",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nmyHand.play(0);\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "55745fde-ba3b-4950-91c7-219de8dec368",
                "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT03-04: Play",
            "suites": [],
            "tests": [
              {
                "title": "UT03-04-01: Play Card on Index",
                "fullTitle": "UT03: Hand UT03-04: Play UT03-04-01: Play Card on Index",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.play(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "fe1d7443-914d-4822-bc69-18c0b779ea92",
                "parentUUID": "2dc843fc-c6c8-4333-8990-26681113bc3d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.hand.js",
            "uuid": "2dc843fc-c6c8-4333-8990-26681113bc3d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
            "passes": [
              {
                "title": "UT03-04-01: Play Card on Index",
                "fullTitle": "UT03: Hand UT03-04: Play UT03-04-01: Play Card on Index",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.play(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "fe1d7443-914d-4822-bc69-18c0b779ea92",
                "parentUUID": "2dc843fc-c6c8-4333-8990-26681113bc3d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT03-05: Look",
            "suites": [],
            "tests": [
              {
                "title": "UT03-05-01: Look at Card on index",
                "fullTitle": "UT03: Hand UT03-05: Look UT03-05-01: Look at Card on index",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "587c7432-9973-455e-86ea-33feaa853c0a",
                "parentUUID": "1a033344-8d42-4f36-828e-d19aaf6d08d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.hand.js",
            "uuid": "1a033344-8d42-4f36-828e-d19aaf6d08d0",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
            "passes": [
              {
                "title": "UT03-05-01: Look at Card on index",
                "fullTitle": "UT03: Hand UT03-05: Look UT03-05-01: Look at Card on index",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "587c7432-9973-455e-86ea-33feaa853c0a",
                "parentUUID": "1a033344-8d42-4f36-828e-d19aaf6d08d0",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT03-06: add",
            "suites": [],
            "tests": [
              {
                "title": "UT03-06-01: Card should be added Last and number of cards is up by one",
                "fullTitle": "UT03: Hand UT03-06: add UT03-06-01: Card should be added Last and number of cards is up by one",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
                "err": {},
                "isRoot": false,
                "uuid": "5dda764d-0283-480d-b0cf-f8e7de90abd4",
                "parentUUID": "a34a4f65-4ce1-4892-922e-9c02dbe985f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.hand.js",
            "uuid": "a34a4f65-4ce1-4892-922e-9c02dbe985f4",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
            "passes": [
              {
                "title": "UT03-06-01: Card should be added Last and number of cards is up by one",
                "fullTitle": "UT03: Hand UT03-06: add UT03-06-01: Card should be added Last and number of cards is up by one",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
                "err": {},
                "isRoot": false,
                "uuid": "5dda764d-0283-480d-b0cf-f8e7de90abd4",
                "parentUUID": "a34a4f65-4ce1-4892-922e-9c02dbe985f4",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/dist/tests/test.hand.js",
        "uuid": "fb399e97-9724-4687-a492-ebdfd38da951",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.hand.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "6e0d35c3-bef5-4bad-a33d-496059fac2e6",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "UT01-01-01: Throw Error on Missing Suit",
      "fullTitle": "UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "6c230316-4279-46f9-805e-4afe3b555c9b",
      "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: Throw Error on Missing Value",
      "fullTitle": "UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "923f4dd9-2b05-4e51-b05b-718221c9706d",
      "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-03: Return Card on Good Values",
      "fullTitle": "UT01-01: Constructor UT01-01-03: Return Card on Good Values",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
      "err": {},
      "isRoot": false,
      "uuid": "d4dbe6ed-40d2-4015-a85b-8c2193f6b199",
      "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: Return the Correct Numbers",
      "fullTitle": "UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
      "err": {},
      "isRoot": false,
      "uuid": "5f0d2a8b-20f1-4c9e-abc9-07f098a00c2a",
      "parentUUID": "1b0203a7-9e45-4c18-93f9-2a4f0ee7c777",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-01-01: Return Deck",
      "fullTitle": "UT02-01: Constructor UT02-01-01: Return Deck",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "3febec68-8345-4862-8a87-302fa343d5d9",
      "parentUUID": "16d97c28-d6c9-43e9-a6d1-9aa8bc796009",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Deck should be shuffled",
      "fullTitle": "UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
      "err": {},
      "isRoot": false,
      "uuid": "73887f74-f83a-4502-bd57-44db11ec994f",
      "parentUUID": "c77b7e67-434d-44ce-822b-e61f9880c6bb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Initialliy there should be 52",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "af1e1ddc-1e10-4a4d-9a39-cd394487a97c",
      "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Adding a Card to get 53",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
      "err": {},
      "isRoot": false,
      "uuid": "d2544e64-dea5-495a-8827-21304c94b11c",
      "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-03: Drawing a Card to get 51",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "a65f420d-6028-48b8-9214-b97c86e75eca",
      "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "fullTitle": "UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "12a48301-997d-4d1d-9a7f-1887c15f998e",
      "parentUUID": "ebfe3089-4a1f-4043-91ae-02c6d40f83b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "fullTitle": "UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "98125c3d-5476-4843-8be2-93c48e3fcc7c",
      "parentUUID": "d4238625-2231-4fa8-80c3-9558459dc8f1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
      "fullTitle": "UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
      "err": {},
      "isRoot": false,
      "uuid": "b1ccf0f9-c7c0-45f2-b45c-f314a30ae737",
      "parentUUID": "e6f097a5-9856-433d-af61-fac77472982d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
      "fullTitle": "UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
      "err": {},
      "isRoot": false,
      "uuid": "a4ad5ab1-022f-40e5-9326-c9310cd86686",
      "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "fullTitle": "UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "8813f64f-33b0-4d15-bbb4-d241b6cd8d8b",
      "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-01-01: Return Hand",
      "fullTitle": "UT03-01: Constructor UT03-01-01: Return Hand",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "1152fbc9-76d6-48dd-9103-c869b0cb7b56",
      "parentUUID": "e9c18fd6-a120-465e-9a08-e0c5f011760a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-02-01: Should show an Array of all Cards",
      "fullTitle": "UT03-02: List UT03-02-01: Should show an Array of all Cards",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nmyHand.add(new card_1.Card(card_1.Value.Nine, card_1.Suit.Hearts));\nchai_1.expect(myHand.cardsInHand()).to.equal(2);\nlet cards = myHand.list();\nchai_1.expect(cards[0].suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(cards[0].value).to.equal(card_1.Value.Eight);\nchai_1.expect(cards[1].suit).to.equal(card_1.Suit.Hearts);\nchai_1.expect(cards[1].value).to.equal(card_1.Value.Nine);\nchai_1.expect(myHand.cardsInHand()).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "5c195e18-02bc-4860-b0de-325e27b39ed2",
      "parentUUID": "a662a233-48b6-43c8-93b6-d045ea93f79e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-03-01: Initialliy there should be 0",
      "fullTitle": "UT03-03: cardsInHand UT03-03-01: Initialliy there should be 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "d08017ad-ff04-445f-9cce-1725cece23dd",
      "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-03-02: Adding a Card to get 1",
      "fullTitle": "UT03-03: cardsInHand UT03-03-02: Adding a Card to get 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "bf6f5598-efb8-4d3c-b4df-ac4755860882",
      "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-03: Playing a Card to get to 0",
      "fullTitle": "UT03-03: cardsInHand UT02-03-03: Playing a Card to get to 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nmyHand.play(0);\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "55745fde-ba3b-4950-91c7-219de8dec368",
      "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-04-01: Play Card on Index",
      "fullTitle": "UT03-04: Play UT03-04-01: Play Card on Index",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.play(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "fe1d7443-914d-4822-bc69-18c0b779ea92",
      "parentUUID": "2dc843fc-c6c8-4333-8990-26681113bc3d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-05-01: Look at Card on index",
      "fullTitle": "UT03-05: Look UT03-05-01: Look at Card on index",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "587c7432-9973-455e-86ea-33feaa853c0a",
      "parentUUID": "1a033344-8d42-4f36-828e-d19aaf6d08d0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-06-01: Card should be added Last and number of cards is up by one",
      "fullTitle": "UT03-06: add UT03-06-01: Card should be added Last and number of cards is up by one",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
      "err": {},
      "isRoot": false,
      "uuid": "5dda764d-0283-480d-b0cf-f8e7de90abd4",
      "parentUUID": "a34a4f65-4ce1-4892-922e-9c02dbe985f4",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "UT01-01-01: Throw Error on Missing Suit",
      "fullTitle": "UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "6c230316-4279-46f9-805e-4afe3b555c9b",
      "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: Throw Error on Missing Value",
      "fullTitle": "UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "923f4dd9-2b05-4e51-b05b-718221c9706d",
      "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-03: Return Card on Good Values",
      "fullTitle": "UT01-01: Constructor UT01-01-03: Return Card on Good Values",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
      "err": {},
      "isRoot": false,
      "uuid": "d4dbe6ed-40d2-4015-a85b-8c2193f6b199",
      "parentUUID": "aa3836ec-4076-47ae-9611-27713d520200",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: Return the Correct Numbers",
      "fullTitle": "UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
      "err": {},
      "isRoot": false,
      "uuid": "5f0d2a8b-20f1-4c9e-abc9-07f098a00c2a",
      "parentUUID": "1b0203a7-9e45-4c18-93f9-2a4f0ee7c777",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-01-01: Return Deck",
      "fullTitle": "UT02-01: Constructor UT02-01-01: Return Deck",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "3febec68-8345-4862-8a87-302fa343d5d9",
      "parentUUID": "16d97c28-d6c9-43e9-a6d1-9aa8bc796009",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Deck should be shuffled",
      "fullTitle": "UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
      "err": {},
      "isRoot": false,
      "uuid": "73887f74-f83a-4502-bd57-44db11ec994f",
      "parentUUID": "c77b7e67-434d-44ce-822b-e61f9880c6bb",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Initialliy there should be 52",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "af1e1ddc-1e10-4a4d-9a39-cd394487a97c",
      "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Adding a Card to get 53",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
      "err": {},
      "isRoot": false,
      "uuid": "d2544e64-dea5-495a-8827-21304c94b11c",
      "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-03: Drawing a Card to get 51",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "a65f420d-6028-48b8-9214-b97c86e75eca",
      "parentUUID": "7e2c0810-af94-4a64-a435-d37e54b7d94e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "fullTitle": "UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "12a48301-997d-4d1d-9a7f-1887c15f998e",
      "parentUUID": "ebfe3089-4a1f-4043-91ae-02c6d40f83b6",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "fullTitle": "UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "98125c3d-5476-4843-8be2-93c48e3fcc7c",
      "parentUUID": "d4238625-2231-4fa8-80c3-9558459dc8f1",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
      "fullTitle": "UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
      "err": {},
      "isRoot": false,
      "uuid": "b1ccf0f9-c7c0-45f2-b45c-f314a30ae737",
      "parentUUID": "e6f097a5-9856-433d-af61-fac77472982d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
      "fullTitle": "UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
      "err": {},
      "isRoot": false,
      "uuid": "a4ad5ab1-022f-40e5-9326-c9310cd86686",
      "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "fullTitle": "UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "8813f64f-33b0-4d15-bbb4-d241b6cd8d8b",
      "parentUUID": "1d6951af-ded3-4787-a97d-7656995e2040",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-01-01: Return Hand",
      "fullTitle": "UT03-01: Constructor UT03-01-01: Return Hand",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "1152fbc9-76d6-48dd-9103-c869b0cb7b56",
      "parentUUID": "e9c18fd6-a120-465e-9a08-e0c5f011760a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-02-01: Should show an Array of all Cards",
      "fullTitle": "UT03-02: List UT03-02-01: Should show an Array of all Cards",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nmyHand.add(new card_1.Card(card_1.Value.Nine, card_1.Suit.Hearts));\nchai_1.expect(myHand.cardsInHand()).to.equal(2);\nlet cards = myHand.list();\nchai_1.expect(cards[0].suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(cards[0].value).to.equal(card_1.Value.Eight);\nchai_1.expect(cards[1].suit).to.equal(card_1.Suit.Hearts);\nchai_1.expect(cards[1].value).to.equal(card_1.Value.Nine);\nchai_1.expect(myHand.cardsInHand()).to.equal(2);",
      "err": {},
      "isRoot": false,
      "uuid": "5c195e18-02bc-4860-b0de-325e27b39ed2",
      "parentUUID": "a662a233-48b6-43c8-93b6-d045ea93f79e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-03-01: Initialliy there should be 0",
      "fullTitle": "UT03-03: cardsInHand UT03-03-01: Initialliy there should be 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "d08017ad-ff04-445f-9cce-1725cece23dd",
      "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-03-02: Adding a Card to get 1",
      "fullTitle": "UT03-03: cardsInHand UT03-03-02: Adding a Card to get 1",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "bf6f5598-efb8-4d3c-b4df-ac4755860882",
      "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-03: Playing a Card to get to 0",
      "fullTitle": "UT03-03: cardsInHand UT02-03-03: Playing a Card to get to 0",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nmyHand.play(0);\nchai_1.expect(myHand.cardsInHand()).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "55745fde-ba3b-4950-91c7-219de8dec368",
      "parentUUID": "30353d89-2c77-4d5e-9ad2-10f349c680e0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-04-01: Play Card on Index",
      "fullTitle": "UT03-04: Play UT03-04-01: Play Card on Index",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.play(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(0);",
      "err": {},
      "isRoot": false,
      "uuid": "fe1d7443-914d-4822-bc69-18c0b779ea92",
      "parentUUID": "2dc843fc-c6c8-4333-8990-26681113bc3d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-05-01: Look at Card on index",
      "fullTitle": "UT03-05: Look UT03-05-01: Look at Card on index",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.Cards.length).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);\nchai_1.expect(myHand.Cards.length).to.equal(1);",
      "err": {},
      "isRoot": false,
      "uuid": "587c7432-9973-455e-86ea-33feaa853c0a",
      "parentUUID": "1a033344-8d42-4f36-828e-d19aaf6d08d0",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT03-06-01: Card should be added Last and number of cards is up by one",
      "fullTitle": "UT03-06: add UT03-06-01: Card should be added Last and number of cards is up by one",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myHand = new hand_1.Hand();\nchai_1.expect(myHand.cardsInHand()).to.equal(0);\nmyHand.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myHand.cardsInHand()).to.equal(1);\nlet myCard = myHand.look(0);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
      "err": {},
      "isRoot": false,
      "uuid": "5dda764d-0283-480d-b0cf-f8e7de90abd4",
      "parentUUID": "a34a4f65-4ce1-4892-922e-9c02dbe985f4",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}