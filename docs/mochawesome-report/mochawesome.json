{
  "stats": {
    "suites": 11,
    "tests": 14,
    "passes": 14,
    "pending": 0,
    "failures": 0,
    "start": "2018-01-17T13:36:27.204Z",
    "end": "2018-01-17T13:36:27.238Z",
    "duration": 34,
    "testsRegistered": 14,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "UT01: Card",
        "suites": [
          {
            "title": "UT01-01: Constructor",
            "suites": [],
            "tests": [
              {
                "title": "UT01-01-01: Throw Error on Missing Suit",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "2785dbc8-d247-45c8-bc11-4793177dc1d3",
                "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: Throw Error on Missing Value",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "22a35c81-486a-4261-875e-15b198f0f2a9",
                "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-03: Return Card on Good Values",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-03: Return Card on Good Values",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
                "err": {},
                "isRoot": false,
                "uuid": "baa78c47-aecd-45e4-8e45-992d7ae4f839",
                "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.card.js",
            "uuid": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.card.js",
            "passes": [
              {
                "title": "UT01-01-01: Throw Error on Missing Suit",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "2785dbc8-d247-45c8-bc11-4793177dc1d3",
                "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-02: Throw Error on Missing Value",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
                "err": {},
                "isRoot": false,
                "uuid": "22a35c81-486a-4261-875e-15b198f0f2a9",
                "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT01-01-03: Return Card on Good Values",
                "fullTitle": "UT01: Card UT01-01: Constructor UT01-01-03: Return Card on Good Values",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
                "err": {},
                "isRoot": false,
                "uuid": "baa78c47-aecd-45e4-8e45-992d7ae4f839",
                "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          },
          {
            "title": "UT01-02: valueOf",
            "suites": [],
            "tests": [
              {
                "title": "UT01-02-01: Return the Correct Numbers",
                "fullTitle": "UT01: Card UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
                "err": {},
                "isRoot": false,
                "uuid": "4bfc6afd-3333-41f6-9bc0-229059c00eb3",
                "parentUUID": "23214cee-c813-4009-831b-21295704dbef",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.card.js",
            "uuid": "23214cee-c813-4009-831b-21295704dbef",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.card.js",
            "passes": [
              {
                "title": "UT01-02-01: Return the Correct Numbers",
                "fullTitle": "UT01: Card UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
                "timedOut": false,
                "duration": 2,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
                "err": {},
                "isRoot": false,
                "uuid": "4bfc6afd-3333-41f6-9bc0-229059c00eb3",
                "parentUUID": "23214cee-c813-4009-831b-21295704dbef",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 2,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/dist/tests/test.card.js",
        "uuid": "1ea7b0e6-ff1b-45a3-bdd4-1b4edbb973b7",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.card.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "UT02: Deck",
        "suites": [
          {
            "title": "UT02-01: Constructor",
            "suites": [],
            "tests": [
              {
                "title": "UT02-01-01: Return Deck",
                "fullTitle": "UT02: Deck UT02-01: Constructor UT02-01-01: Return Deck",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "a3fa23b4-d936-435f-be2e-8c24074d4673",
                "parentUUID": "c9073c8c-ad4a-436a-bbce-4323e018b2db",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "c9073c8c-ad4a-436a-bbce-4323e018b2db",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-01-01: Return Deck",
                "fullTitle": "UT02: Deck UT02-01: Constructor UT02-01-01: Return Deck",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "a3fa23b4-d936-435f-be2e-8c24074d4673",
                "parentUUID": "c9073c8c-ad4a-436a-bbce-4323e018b2db",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-02: Shuffle",
            "suites": [],
            "tests": [
              {
                "title": "UT02-02-01: Deck should be shuffled",
                "fullTitle": "UT02: Deck UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
                "err": {},
                "isRoot": false,
                "uuid": "aa58dcac-d4d5-43c7-b96a-016968d5762a",
                "parentUUID": "1219371e-e10d-4250-ade7-41e369e7c27f",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "1219371e-e10d-4250-ade7-41e369e7c27f",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-02-01: Deck should be shuffled",
                "fullTitle": "UT02: Deck UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
                "err": {},
                "isRoot": false,
                "uuid": "aa58dcac-d4d5-43c7-b96a-016968d5762a",
                "parentUUID": "1219371e-e10d-4250-ade7-41e369e7c27f",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-03: cardsInDeck",
            "suites": [],
            "tests": [
              {
                "title": "UT02-03-01: Initialliy there should be 52",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "12b0c918-f715-4c2e-8723-833c2b1e89a5",
                "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Adding a Card to get 53",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
                "err": {},
                "isRoot": false,
                "uuid": "d7d49c67-2901-4f26-a754-53d104bd66e5",
                "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-03: Drawing a Card to get 51",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "25c4dba0-6b7d-46e8-a479-c6164fccdfc9",
                "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "243d49b0-5865-445e-bb81-c6c02398deea",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-03-01: Initialliy there should be 52",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "12b0c918-f715-4c2e-8723-833c2b1e89a5",
                "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-02: Adding a Card to get 53",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
                "err": {},
                "isRoot": false,
                "uuid": "d7d49c67-2901-4f26-a754-53d104bd66e5",
                "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-03-03: Drawing a Card to get 51",
                "fullTitle": "UT02: Deck UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "25c4dba0-6b7d-46e8-a479-c6164fccdfc9",
                "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-04: Draw",
            "suites": [],
            "tests": [
              {
                "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "fullTitle": "UT02: Deck UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "e2d4907d-884d-4b70-a6fb-4c7de6cfe29a",
                "parentUUID": "e052a208-4cac-4aff-adee-c0670a721f2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "e052a208-4cac-4aff-adee-c0670a721f2e",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "fullTitle": "UT02: Deck UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
                "timedOut": false,
                "duration": 1,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
                "err": {},
                "isRoot": false,
                "uuid": "e2d4907d-884d-4b70-a6fb-4c7de6cfe29a",
                "parentUUID": "e052a208-4cac-4aff-adee-c0670a721f2e",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 1,
            "rootEmpty": false
          },
          {
            "title": "UT02-05: Peek",
            "suites": [],
            "tests": [
              {
                "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "fullTitle": "UT02: Deck UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "b2138c01-8b2a-4767-887f-0273915af947",
                "parentUUID": "c4c88d88-9a43-4c37-acd8-f208e39228d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "c4c88d88-9a43-4c37-acd8-f208e39228d4",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "fullTitle": "UT02: Deck UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "b2138c01-8b2a-4767-887f-0273915af947",
                "parentUUID": "c4c88d88-9a43-4c37-acd8-f208e39228d4",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT02-06: add",
            "suites": [],
            "tests": [
              {
                "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
                "fullTitle": "UT02: Deck UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
                "err": {},
                "isRoot": false,
                "uuid": "af3f7b7b-45f3-4124-bee4-df19702c53b0",
                "parentUUID": "f6a21a63-5438-4e79-9f79-42378c07713a",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "f6a21a63-5438-4e79-9f79-42378c07713a",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
                "fullTitle": "UT02: Deck UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
                "err": {},
                "isRoot": false,
                "uuid": "af3f7b7b-45f3-4124-bee4-df19702c53b0",
                "parentUUID": "f6a21a63-5438-4e79-9f79-42378c07713a",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          },
          {
            "title": "UT02-07: Refill",
            "suites": [],
            "tests": [
              {
                "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
                "err": {},
                "isRoot": false,
                "uuid": "1fab57e8-d1ff-4db3-ad96-f2d0ae71ad97",
                "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "536358d1-308d-4d4c-a0ff-5c6496cbbdf3",
                "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/dist/tests/test.deck.js",
            "uuid": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
            "passes": [
              {
                "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
                "err": {},
                "isRoot": false,
                "uuid": "1fab57e8-d1ff-4db3-ad96-f2d0ae71ad97",
                "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "fullTitle": "UT02: Deck UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
                "timedOut": false,
                "duration": 0,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
                "err": {},
                "isRoot": false,
                "uuid": "536358d1-308d-4d4c-a0ff-5c6496cbbdf3",
                "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 2,
            "totalPasses": 2,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 0,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/dist/tests/test.deck.js",
        "uuid": "5e3fa319-b509-41fe-8533-a1a1d15ade7c",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/mnt/c/Users/sigmu/Code/gamesimulator/lib-gs-cards/dist/tests/test.deck.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "0126eece-ffb8-4727-bcf8-8b0151e216e7",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": false,
    "hasSuites": true,
    "totalTests": 0,
    "totalPasses": 0,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": false,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 0,
    "rootEmpty": true
  },
  "allTests": [
    {
      "title": "UT01-01-01: Throw Error on Missing Suit",
      "fullTitle": "UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "2785dbc8-d247-45c8-bc11-4793177dc1d3",
      "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: Throw Error on Missing Value",
      "fullTitle": "UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "22a35c81-486a-4261-875e-15b198f0f2a9",
      "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-03: Return Card on Good Values",
      "fullTitle": "UT01-01: Constructor UT01-01-03: Return Card on Good Values",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
      "err": {},
      "isRoot": false,
      "uuid": "baa78c47-aecd-45e4-8e45-992d7ae4f839",
      "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: Return the Correct Numbers",
      "fullTitle": "UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
      "err": {},
      "isRoot": false,
      "uuid": "4bfc6afd-3333-41f6-9bc0-229059c00eb3",
      "parentUUID": "23214cee-c813-4009-831b-21295704dbef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-01-01: Return Deck",
      "fullTitle": "UT02-01: Constructor UT02-01-01: Return Deck",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "a3fa23b4-d936-435f-be2e-8c24074d4673",
      "parentUUID": "c9073c8c-ad4a-436a-bbce-4323e018b2db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Deck should be shuffled",
      "fullTitle": "UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
      "err": {},
      "isRoot": false,
      "uuid": "aa58dcac-d4d5-43c7-b96a-016968d5762a",
      "parentUUID": "1219371e-e10d-4250-ade7-41e369e7c27f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Initialliy there should be 52",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "12b0c918-f715-4c2e-8723-833c2b1e89a5",
      "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Adding a Card to get 53",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
      "err": {},
      "isRoot": false,
      "uuid": "d7d49c67-2901-4f26-a754-53d104bd66e5",
      "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-03: Drawing a Card to get 51",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "25c4dba0-6b7d-46e8-a479-c6164fccdfc9",
      "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "fullTitle": "UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "e2d4907d-884d-4b70-a6fb-4c7de6cfe29a",
      "parentUUID": "e052a208-4cac-4aff-adee-c0670a721f2e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "fullTitle": "UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "b2138c01-8b2a-4767-887f-0273915af947",
      "parentUUID": "c4c88d88-9a43-4c37-acd8-f208e39228d4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
      "fullTitle": "UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
      "err": {},
      "isRoot": false,
      "uuid": "af3f7b7b-45f3-4124-bee4-df19702c53b0",
      "parentUUID": "f6a21a63-5438-4e79-9f79-42378c07713a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
      "fullTitle": "UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
      "err": {},
      "isRoot": false,
      "uuid": "1fab57e8-d1ff-4db3-ad96-f2d0ae71ad97",
      "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "fullTitle": "UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "536358d1-308d-4d4c-a0ff-5c6496cbbdf3",
      "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "UT01-01-01: Throw Error on Missing Suit",
      "fullTitle": "UT01-01: Constructor UT01-01-01: Throw Error on Missing Suit",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(card_1.Value.Ace, null);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "2785dbc8-d247-45c8-bc11-4793177dc1d3",
      "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-02: Throw Error on Missing Value",
      "fullTitle": "UT01-01: Constructor UT01-01-02: Throw Error on Missing Value",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "try {\n    let myCard = new card_1.Card(null, card_1.Suit.Clubs);\n    done(new Error('Here should be an Error'));\n}\ncatch (error) {\n    done();\n}",
      "err": {},
      "isRoot": false,
      "uuid": "22a35c81-486a-4261-875e-15b198f0f2a9",
      "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-01-03: Return Card on Good Values",
      "fullTitle": "UT01-01: Constructor UT01-01-03: Return Card on Good Values",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myCard = new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades);\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Spades);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Ace);",
      "err": {},
      "isRoot": false,
      "uuid": "baa78c47-aecd-45e4-8e45-992d7ae4f839",
      "parentUUID": "85b490cb-8ef2-4eb3-8710-9f60ece49159",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT01-02-01: Return the Correct Numbers",
      "fullTitle": "UT01-02: valueOf UT01-02-01: Return the Correct Numbers",
      "timedOut": false,
      "duration": 2,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "chai_1.expect(new card_1.Card(card_1.Value.Ace, card_1.Suit.Spades).valueOf()).to.equal(1);\nchai_1.expect(new card_1.Card(card_1.Value.Two, card_1.Suit.Spades).valueOf()).to.equal(2);\nchai_1.expect(new card_1.Card(card_1.Value.Three, card_1.Suit.Spades).valueOf()).to.equal(3);\nchai_1.expect(new card_1.Card(card_1.Value.Four, card_1.Suit.Spades).valueOf()).to.equal(4);\nchai_1.expect(new card_1.Card(card_1.Value.Five, card_1.Suit.Spades).valueOf()).to.equal(5);\nchai_1.expect(new card_1.Card(card_1.Value.Six, card_1.Suit.Spades).valueOf()).to.equal(6);\nchai_1.expect(new card_1.Card(card_1.Value.Seven, card_1.Suit.Spades).valueOf()).to.equal(7);\nchai_1.expect(new card_1.Card(card_1.Value.Eight, card_1.Suit.Spades).valueOf()).to.equal(8);\nchai_1.expect(new card_1.Card(card_1.Value.Nine, card_1.Suit.Spades).valueOf()).to.equal(9);\nchai_1.expect(new card_1.Card(card_1.Value.Ten, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Jack, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.Queen, card_1.Suit.Spades).valueOf()).to.equal(10);\nchai_1.expect(new card_1.Card(card_1.Value.King, card_1.Suit.Spades).valueOf()).to.equal(10);",
      "err": {},
      "isRoot": false,
      "uuid": "4bfc6afd-3333-41f6-9bc0-229059c00eb3",
      "parentUUID": "23214cee-c813-4009-831b-21295704dbef",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-01-01: Return Deck",
      "fullTitle": "UT02-01: Constructor UT02-01-01: Return Deck",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "a3fa23b4-d936-435f-be2e-8c24074d4673",
      "parentUUID": "c9073c8c-ad4a-436a-bbce-4323e018b2db",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-02-01: Deck should be shuffled",
      "fullTitle": "UT02-02: Shuffle UT02-02-01: Deck should be shuffled",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nmyDeck.shuffle();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.value).to.not.equal(card_1.Value.King);",
      "err": {},
      "isRoot": false,
      "uuid": "aa58dcac-d4d5-43c7-b96a-016968d5762a",
      "parentUUID": "1219371e-e10d-4250-ade7-41e369e7c27f",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-01: Initialliy there should be 52",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-01: Initialliy there should be 52",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "12b0c918-f715-4c2e-8723-833c2b1e89a5",
      "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-02: Adding a Card to get 53",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-02: Adding a Card to get 53",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);",
      "err": {},
      "isRoot": false,
      "uuid": "d7d49c67-2901-4f26-a754-53d104bd66e5",
      "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-03-03: Drawing a Card to get 51",
      "fullTitle": "UT02-03: cardsInDeck UT02-03-03: Drawing a Card to get 51",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.draw();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "25c4dba0-6b7d-46e8-a479-c6164fccdfc9",
      "parentUUID": "243d49b0-5865-445e-bb81-c6c02398deea",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "fullTitle": "UT02-04: Draw UT02-04-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should loose the card",
      "timedOut": false,
      "duration": 1,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.draw();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(51);",
      "err": {},
      "isRoot": false,
      "uuid": "e2d4907d-884d-4b70-a6fb-4c7de6cfe29a",
      "parentUUID": "e052a208-4cac-4aff-adee-c0670a721f2e",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "fullTitle": "UT02-05: Peek UT02-05-01: Return Card on a fresh deck (it should be the King of Spades). Also the Deck should not loose the card",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.Cards.length).to.equal(52);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit[card_1.Suit.Spades]);\nchai_1.expect(myCard.value).to.equal(card_1.Value[card_1.Value.King]);\nchai_1.expect(myDeck.Cards.length).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "b2138c01-8b2a-4767-887f-0273915af947",
      "parentUUID": "c4c88d88-9a43-4c37-acd8-f208e39228d4",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-06-01: Card should be added Last and number of cards is up by one",
      "fullTitle": "UT02-06: add UT02-06-01: Card should be added Last and number of cards is up by one",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.add(new card_1.Card(card_1.Value.Eight, card_1.Suit.Diamonds));\nchai_1.expect(myDeck.cardsInDeck()).to.equal(53);\nlet myCard = myDeck.peek();\nchai_1.expect(myCard.suit).to.equal(card_1.Suit.Diamonds);\nchai_1.expect(myCard.value).to.equal(card_1.Value.Eight);",
      "err": {},
      "isRoot": false,
      "uuid": "af3f7b7b-45f3-4124-bee4-df19702c53b0",
      "parentUUID": "f6a21a63-5438-4e79-9f79-42378c07713a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-01: Performing on a new deck should increase the number to 104",
      "fullTitle": "UT02-07: Refill UT02-07-01: Performing on a new deck should increase the number to 104",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(104);",
      "err": {},
      "isRoot": false,
      "uuid": "1fab57e8-d1ff-4db3-ad96-f2d0ae71ad97",
      "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "fullTitle": "UT02-07: Refill UT02-07-02: Performing on an empty deck should set the number to 52 again",
      "timedOut": false,
      "duration": 0,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "let myDeck = new deck_1.Deck();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);\nmyDeck.Cards = new Array();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(0);\nmyDeck.refill();\nchai_1.expect(myDeck.cardsInDeck()).to.equal(52);",
      "err": {},
      "isRoot": false,
      "uuid": "536358d1-308d-4d4c-a0ff-5c6496cbbdf3",
      "parentUUID": "d35b0286-bf3c-4c62-b892-13f55bfadc3d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2018
}